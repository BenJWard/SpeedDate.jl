{
    "docs": [
        {
            "location": "/", 
            "text": "SpeedDate Documentation\n\n\n\n\nIntroduction\n\n\nThe dating estimation method\n\n\n\n\n\n\nInstallation\n\n\nInstalling SpeedDate to your machine\n\n\n\n\n\n\nRunning SpeedDate as a command line application\n\n\nComputing divergence times\n\n\nPlotting SpeedDate results\n\n\nRunning SpeedDate with a GTK based Graphical User Interface\n\n\nUsing SpeedDate from a julia script or session\n\n\nPlotting SpeedDate results from a julia script or session", 
            "title": "Home"
        }, 
        {
            "location": "/#speeddate-documentation", 
            "text": "Introduction  The dating estimation method    Installation  Installing SpeedDate to your machine    Running SpeedDate as a command line application  Computing divergence times  Plotting SpeedDate results  Running SpeedDate with a GTK based Graphical User Interface  Using SpeedDate from a julia script or session  Plotting SpeedDate results from a julia script or session", 
            "title": "SpeedDate Documentation"
        }, 
        {
            "location": "/man/intro/", 
            "text": "Introduction\n\n\nSpeedDate is the name given to a method of estimating a divergence time between two DNA sequence regions that was first implemented in the R package \nHybridCheck\n in order to date regions of introgression in large sequence contigs.\n\n\nThe current SpeedDate is implemented in the \nSpeedDate.jl\n package, which depends on \nBio.jl\n for core functionality like the input and output of DNA sequences and data, and computation of mutation counts and genetic distances.\n\n\n\n\nThe dating estimation method\n\n\nThe divergence time is estimated using the number of mutations that have occurred between two aligned sequences.\n\n\nThe calculation uses a strict molecular clock which assumes a constant substitution rate, both through time and across taxa.\n\n\nModelling the mutation accumulation process as a Bernoulli trial, the probability of observing $k$ or fewer mutations between two sequences of length $n$ can be given as:\n\n\n$$\nPr(X \\le k) = \\sum_{i=0}^{\\lfloor k \\rfloor} \\binom{n}{i} p^i (1 - p)^{n-i}\n$$\n\n\nWhere $p$ is the probability of observing a single mutation between the two aligned sequences.\n\n\nThe value of $p$ depends on two key factors: the substitution rate and the divergence time.\n\n\nIf you assume a molecular clock, whereby two DNA sequences are both accumulating mutations at a rate $\\mu$ for $t$ generations, then you may define $p = 2\\mu t$.\n\n\nUsing these assumptions, the SpeedDate method finds the root of the following formula for $Pr(X \\le k) = 0.05$, $0.5$, and $0.95$, and then divides the three answers by twice the assumed substitution rate.\n\n\n$$\nf(n, k, 2\\mu t, Pr(X \\le k) = \\left( \\sum_{i=0}^{\\lfloor k \\rfloor} \\binom{n}{i} {2\\mu t}^i (1 - 2\\mu t)^{n-i}   \\right) - Pr(X \\le k)\n$$\n\n\nThis results in an upper, middle, and lower estimate of the coalescence time $t$ of the two sequences (expressed as the number of generations).\n\n\nThis method has been written into the Phylo module of the flagship package of the BioJulia project, Bio.jl as a function called \ncoaltime\n, and SpeedDate simply bundles the steps of loading data, conting mutations in sequences, and passing that information to \ncoaltime\n, and writing results to file, easier.", 
            "title": "Introduction"
        }, 
        {
            "location": "/man/intro/#introduction", 
            "text": "SpeedDate is the name given to a method of estimating a divergence time between two DNA sequence regions that was first implemented in the R package  HybridCheck  in order to date regions of introgression in large sequence contigs.  The current SpeedDate is implemented in the  SpeedDate.jl  package, which depends on  Bio.jl  for core functionality like the input and output of DNA sequences and data, and computation of mutation counts and genetic distances.", 
            "title": "Introduction"
        }, 
        {
            "location": "/man/intro/#the-dating-estimation-method", 
            "text": "The divergence time is estimated using the number of mutations that have occurred between two aligned sequences.  The calculation uses a strict molecular clock which assumes a constant substitution rate, both through time and across taxa.  Modelling the mutation accumulation process as a Bernoulli trial, the probability of observing $k$ or fewer mutations between two sequences of length $n$ can be given as:  $$\nPr(X \\le k) = \\sum_{i=0}^{\\lfloor k \\rfloor} \\binom{n}{i} p^i (1 - p)^{n-i}\n$$  Where $p$ is the probability of observing a single mutation between the two aligned sequences.  The value of $p$ depends on two key factors: the substitution rate and the divergence time.  If you assume a molecular clock, whereby two DNA sequences are both accumulating mutations at a rate $\\mu$ for $t$ generations, then you may define $p = 2\\mu t$.  Using these assumptions, the SpeedDate method finds the root of the following formula for $Pr(X \\le k) = 0.05$, $0.5$, and $0.95$, and then divides the three answers by twice the assumed substitution rate.  $$\nf(n, k, 2\\mu t, Pr(X \\le k) = \\left( \\sum_{i=0}^{\\lfloor k \\rfloor} \\binom{n}{i} {2\\mu t}^i (1 - 2\\mu t)^{n-i}   \\right) - Pr(X \\le k)\n$$  This results in an upper, middle, and lower estimate of the coalescence time $t$ of the two sequences (expressed as the number of generations).  This method has been written into the Phylo module of the flagship package of the BioJulia project, Bio.jl as a function called  coaltime , and SpeedDate simply bundles the steps of loading data, conting mutations in sequences, and passing that information to  coaltime , and writing results to file, easier.", 
            "title": "The dating estimation method"
        }, 
        {
            "location": "/man/install/", 
            "text": "Installation\n\n\nSpeedDate can be used in three forms: If you are comfortable downloading your own julia packages, there is a command line interface and a GTK based GUI bundled in \nSpeedDate.jl\n. There is also a notebook hosted using the \nBinder\n system planned, where you can use a notebook to use the SpeedDate method right away, no need to install anything new on your computer.\n\n\n\n\nInstalling SpeedDate to your machine\n\n\nFirst you should have \njulia installed\n.\n\n\nOpen a julia terminal and enter:\n\n\nEnter in a Julia terminal:\n\n\nPkg\n.\nadd\n(\nhttps://github.com/Ward9250/SpeedDate.jl.git\n)\n\n\n\n\n\n\nTo download and install the master branch.\n\n\njulia might ask you to do the \nPkg.update()\n command before or after installing packages, and this is perfectly normal and fine to do.", 
            "title": "Installation"
        }, 
        {
            "location": "/man/install/#installation", 
            "text": "SpeedDate can be used in three forms: If you are comfortable downloading your own julia packages, there is a command line interface and a GTK based GUI bundled in  SpeedDate.jl . There is also a notebook hosted using the  Binder  system planned, where you can use a notebook to use the SpeedDate method right away, no need to install anything new on your computer.", 
            "title": "Installation"
        }, 
        {
            "location": "/man/install/#installing-speeddate-to-your-machine", 
            "text": "First you should have  julia installed .  Open a julia terminal and enter:  Enter in a Julia terminal:  Pkg . add ( https://github.com/Ward9250/SpeedDate.jl.git )   To download and install the master branch.  julia might ask you to do the  Pkg.update()  command before or after installing packages, and this is perfectly normal and fine to do.", 
            "title": "Installing SpeedDate to your machine"
        }, 
        {
            "location": "/man/cmdline/", 
            "text": "Running SpeedDate as a command line application\n\n\nSpeedDate can be started from the command line by invoking the following line in a terminal.\n\n\njulia -e\nusing SpeedDate; SpeedDate.main()\n\n\n\n\n\n\n\n\nComputing divergence times\n\n\nThe \ncompute\n command is invoked to compute genetic distances and divergence times for an input aligned FASTA file.\n\n\nUse the -h flag to display the possible options for the \ncompute\n command:\n\n\njulia -e\nusing SpeedDate; SpeedDate.main()\n compute -h\nusage: \nPROGRAM\n compute [-f FILE] [-s [DNASEQS...]] [-m MODEL]\n                        [-r MUTATION_RATE] [--method METHOD]\n                        [-o OUTFILE] [--scan] [-w WIDTH] [-c]\n                        [--onlydist] [-h]\n\noptional arguments:\n  -f, --file FILE       An input file.\n  -s, --dnaseqs [DNASEQS...]\n                        The first of two DNA sequences to test (type:\n                        Bio.Seq.BioSequence{Bio.Seq.DNAAlphabet{4}})\n  -m, --model MODEL     The model used to compute genetic distances.\n                        Currently jc69, and k80 are supported.\n                        (default: \njc69\n)\n  -r, --mutation_rate MUTATION_RATE\n                        The mutation rate to be assumed. (type:\n                        Float64, default: 1.0e-8)\n  --method METHOD       The dating method to use. Currently \ndefault\n\n                        and \nsimple\n are supported.  (default:\n                        \ndefault\n)\n  -o, --outfile OUTFILE\n                        Base name for the output files(s). (default:\n                        \nSpeedDate\n)\n  --scan                Whether or not to compute dates across\n                        sequences with a window.\n  -w, --width WIDTH     Width of the window across sequences. (type:\n                        Int64, default: 100)\n  -c, --sepcol          Write the start and end points of sliding\n                        windows in separate columns of output table.\n  --onlydist\n  -h, --help            show this help message and exit\n\n\n\n\n\n\n\nEntering DNA sequences\n\n\nYou will see that you can enter DNA sequences either from a FASTA formatted file using the \n-f\n or \n--file\n flags. Alternatively short sequences can be typed out on the command line using the \n-s\n or \n--dnaseqs\n flags.\n\n\n\n\nParameters for divergence time estimation.\n\n\nSpeedDate computes evolutionary distances between sequences (or windows of sequences if you are estimating divergence times using a sliding window - see below.), by default this is currently the Jukes \n Cantor 69 distance, but can be set to Kimura's 80 distance, by providing the option \n-m k80\n or \n--model k80\n. More estimates are anticipated in future versions.\n\n\nSpeedDate requires a mutation rate to estimate divergence times, by default this is 1.0e-8, but may be altered by using the \n-r\n or \n--mutation_rate\n flag.\n\n\nBy default the SpeedDate method will be used which gives a 95% CI range for the divergence time, but a simpler estimate can be used which gives a single point estimate of the expected divergence time. To do this pass the flag option \n--method simple\n.\n\n\nUse the \n--scan\n option flag to indicate you want to compute the divergence times for windows across your sequences. Set the size of the windows with the flag \n-w\n, e.g. \n-w 1000\n.\n\n\nWhen you run SpeedDate a .csv file containing the evolutionary distance measures, and a .csv file containing the divergence time estimates between your sequences will be output. You can set the base name these output files with \n--outfile\n or \n-o\n.\n\n\n\n\nExtra options\n\n\nIf the flag \n--onlydist\n is used, then SpeedDate will only compute the evolutionary distance measures and output them to file. It will not go on to produce divergence time estimates.   \n\n\n\n\nPlotting SpeedDate results\n\n\nThe \ncompute\n command will write out the results to file as a data-frame, in a text-based file format (csv). This format should be familiar to users of R and other software frameworks that use a similar tabular data structure.\n\n\nThe \nplot\n command is invoked to plot the results of a \ncompute\n run. Of course the user can use whatever plotting solution they desire if they are happy scripting with the resulting data-frame files.\n\n\nThe plot command is very simple and will create simple heat plots using the \nGadfly.jl\n framework.\n\n\nThe options available to the user for plotting can be viewed using the \n-h\n flag:\n\n\njulia -e\nusing SpeedDate; SpeedDate.main()\n plot -h\n\nusage: \nPROGRAM\n plot [--width WIDTH] [--height HEIGHT]\n                      [--units UNITS] [--backend BACKEND]\n                      [--reference REFERENCE] [-h] [inputfile]\n                      [outputfile]\n\npositional arguments:\n  inputfile             The file name of the input data.\n  outputfile            The file name of the output plot.\n\noptional arguments:\n  --width WIDTH         Width of the plot. (type: Float64, default:\n                        12.0)\n  --height HEIGHT       Height of the plot. (type: Float64, default:\n                        8.0)\n  --units UNITS         Units for width and height of the plot.  Must\n                        be one of \ninch\n, \nmm\n, or \ncm\n.  (default:\n                        \ncm\n)\n  --backend BACKEND     The backend used to produce the plot.  Must be\n                        one of \nsvg\n, \nsvgjs\n, \npng\n, \npdf\n, \nps\n, or\n                        \npgf\n.  (default: \nsvg\n)\n  --reference REFERENCE\n                        The name of the DNA sequence to use as a\n                        reference when plotting a windowed analysis.\n                        (default: \ndefault\n)\n  --table               Save the table used for plotting to file.\n  --sortsim             Sort the rows of the output table by average\n                        sequence similarity if you are plotting a\n                        windowed analysis.\n  -h, --help            show this help message and exit.\n\n\n\n\n\nThe command is very simple, with two obligatory arguments: first the filename of a SpeedDate results file is provided, followed by a name for the output plot.\n\n\nOptionally: You can set the width and the height of the generated plot with the flags \n--width\n and \n--height\n, and you can specify the units of the width and height (in mm, cm, or inches), with the \n--units\n flag. By default the units are in centimeters (cm).\n\n\nYou can choose which backend is used to save the plot (i.e. the file format) using the \n--backend\n flag. Most commonly you will want a vectorized format (\"svg\" or \"pdf\"), or a rasterized format (\"png\"). By default the plot will be drawn using an SVG backend.\n\n\nFinally, if you are plotting results from a SpeedDate run which used a sliding window, then you can set the name of the sequence to use as the reference sequence, against which all other sequences are plotted. By default, this falls back to the first sequence name that is mentioned in the results file you give the plot command.\n\n\nThis command can plot distances or divergence times produced by SpeedDate. The divergence times plotted are the \"middle estimates\". Recall from the intro of this manual that SpeedDate makes upper, middle, and lower estimates of the divergence time, forming a 95% confidence interval in which the true age is estimated to lie.\n\n\nAn example usage is below. The input file is called \"SpeedDate_distances.csv\", the output plot is given the name \"myplot\", the plot is written out in PNG format, and the width and height of the plot are set to 50 and 45 cm.\n\n\njulia -e\nusing SpeedDate; SpeedDate.main()\n plot SpeedDate_distances.csv testplot --backend png --width 50.0 --height 45.0", 
            "title": "Command Line"
        }, 
        {
            "location": "/man/cmdline/#running-speeddate-as-a-command-line-application", 
            "text": "SpeedDate can be started from the command line by invoking the following line in a terminal.  julia -e using SpeedDate; SpeedDate.main()", 
            "title": "Running SpeedDate as a command line application"
        }, 
        {
            "location": "/man/cmdline/#computing-divergence-times", 
            "text": "The  compute  command is invoked to compute genetic distances and divergence times for an input aligned FASTA file.  Use the -h flag to display the possible options for the  compute  command:  julia -e using SpeedDate; SpeedDate.main()  compute -h\nusage:  PROGRAM  compute [-f FILE] [-s [DNASEQS...]] [-m MODEL]\n                        [-r MUTATION_RATE] [--method METHOD]\n                        [-o OUTFILE] [--scan] [-w WIDTH] [-c]\n                        [--onlydist] [-h]\n\noptional arguments:\n  -f, --file FILE       An input file.\n  -s, --dnaseqs [DNASEQS...]\n                        The first of two DNA sequences to test (type:\n                        Bio.Seq.BioSequence{Bio.Seq.DNAAlphabet{4}})\n  -m, --model MODEL     The model used to compute genetic distances.\n                        Currently jc69, and k80 are supported.\n                        (default:  jc69 )\n  -r, --mutation_rate MUTATION_RATE\n                        The mutation rate to be assumed. (type:\n                        Float64, default: 1.0e-8)\n  --method METHOD       The dating method to use. Currently  default \n                        and  simple  are supported.  (default:\n                         default )\n  -o, --outfile OUTFILE\n                        Base name for the output files(s). (default:\n                         SpeedDate )\n  --scan                Whether or not to compute dates across\n                        sequences with a window.\n  -w, --width WIDTH     Width of the window across sequences. (type:\n                        Int64, default: 100)\n  -c, --sepcol          Write the start and end points of sliding\n                        windows in separate columns of output table.\n  --onlydist\n  -h, --help            show this help message and exit", 
            "title": "Computing divergence times"
        }, 
        {
            "location": "/man/cmdline/#entering-dna-sequences", 
            "text": "You will see that you can enter DNA sequences either from a FASTA formatted file using the  -f  or  --file  flags. Alternatively short sequences can be typed out on the command line using the  -s  or  --dnaseqs  flags.", 
            "title": "Entering DNA sequences"
        }, 
        {
            "location": "/man/cmdline/#parameters-for-divergence-time-estimation", 
            "text": "SpeedDate computes evolutionary distances between sequences (or windows of sequences if you are estimating divergence times using a sliding window - see below.), by default this is currently the Jukes   Cantor 69 distance, but can be set to Kimura's 80 distance, by providing the option  -m k80  or  --model k80 . More estimates are anticipated in future versions.  SpeedDate requires a mutation rate to estimate divergence times, by default this is 1.0e-8, but may be altered by using the  -r  or  --mutation_rate  flag.  By default the SpeedDate method will be used which gives a 95% CI range for the divergence time, but a simpler estimate can be used which gives a single point estimate of the expected divergence time. To do this pass the flag option  --method simple .  Use the  --scan  option flag to indicate you want to compute the divergence times for windows across your sequences. Set the size of the windows with the flag  -w , e.g.  -w 1000 .  When you run SpeedDate a .csv file containing the evolutionary distance measures, and a .csv file containing the divergence time estimates between your sequences will be output. You can set the base name these output files with  --outfile  or  -o .", 
            "title": "Parameters for divergence time estimation."
        }, 
        {
            "location": "/man/cmdline/#extra-options", 
            "text": "If the flag  --onlydist  is used, then SpeedDate will only compute the evolutionary distance measures and output them to file. It will not go on to produce divergence time estimates.", 
            "title": "Extra options"
        }, 
        {
            "location": "/man/cmdline/#plotting-speeddate-results", 
            "text": "The  compute  command will write out the results to file as a data-frame, in a text-based file format (csv). This format should be familiar to users of R and other software frameworks that use a similar tabular data structure.  The  plot  command is invoked to plot the results of a  compute  run. Of course the user can use whatever plotting solution they desire if they are happy scripting with the resulting data-frame files.  The plot command is very simple and will create simple heat plots using the  Gadfly.jl  framework.  The options available to the user for plotting can be viewed using the  -h  flag:  julia -e using SpeedDate; SpeedDate.main()  plot -h\n\nusage:  PROGRAM  plot [--width WIDTH] [--height HEIGHT]\n                      [--units UNITS] [--backend BACKEND]\n                      [--reference REFERENCE] [-h] [inputfile]\n                      [outputfile]\n\npositional arguments:\n  inputfile             The file name of the input data.\n  outputfile            The file name of the output plot.\n\noptional arguments:\n  --width WIDTH         Width of the plot. (type: Float64, default:\n                        12.0)\n  --height HEIGHT       Height of the plot. (type: Float64, default:\n                        8.0)\n  --units UNITS         Units for width and height of the plot.  Must\n                        be one of  inch ,  mm , or  cm .  (default:\n                         cm )\n  --backend BACKEND     The backend used to produce the plot.  Must be\n                        one of  svg ,  svgjs ,  png ,  pdf ,  ps , or\n                         pgf .  (default:  svg )\n  --reference REFERENCE\n                        The name of the DNA sequence to use as a\n                        reference when plotting a windowed analysis.\n                        (default:  default )\n  --table               Save the table used for plotting to file.\n  --sortsim             Sort the rows of the output table by average\n                        sequence similarity if you are plotting a\n                        windowed analysis.\n  -h, --help            show this help message and exit.  The command is very simple, with two obligatory arguments: first the filename of a SpeedDate results file is provided, followed by a name for the output plot.  Optionally: You can set the width and the height of the generated plot with the flags  --width  and  --height , and you can specify the units of the width and height (in mm, cm, or inches), with the  --units  flag. By default the units are in centimeters (cm).  You can choose which backend is used to save the plot (i.e. the file format) using the  --backend  flag. Most commonly you will want a vectorized format (\"svg\" or \"pdf\"), or a rasterized format (\"png\"). By default the plot will be drawn using an SVG backend.  Finally, if you are plotting results from a SpeedDate run which used a sliding window, then you can set the name of the sequence to use as the reference sequence, against which all other sequences are plotted. By default, this falls back to the first sequence name that is mentioned in the results file you give the plot command.  This command can plot distances or divergence times produced by SpeedDate. The divergence times plotted are the \"middle estimates\". Recall from the intro of this manual that SpeedDate makes upper, middle, and lower estimates of the divergence time, forming a 95% confidence interval in which the true age is estimated to lie.  An example usage is below. The input file is called \"SpeedDate_distances.csv\", the output plot is given the name \"myplot\", the plot is written out in PNG format, and the width and height of the plot are set to 50 and 45 cm.  julia -e using SpeedDate; SpeedDate.main()  plot SpeedDate_distances.csv testplot --backend png --width 50.0 --height 45.0", 
            "title": "Plotting SpeedDate results"
        }, 
        {
            "location": "/man/gtkgui/", 
            "text": "Running SpeedDate with a GTK based Graphical User Interface\n\n\nIf you use the \ninteractive\n command instead of the \ncompute\n command, you will be presented with a GTK based graphical user interface.", 
            "title": "GTK Gui"
        }, 
        {
            "location": "/man/gtkgui/#running-speeddate-with-a-gtk-based-graphical-user-interface", 
            "text": "If you use the  interactive  command instead of the  compute  command, you will be presented with a GTK based graphical user interface.", 
            "title": "Running SpeedDate with a GTK based Graphical User Interface"
        }, 
        {
            "location": "/man/injulia/", 
            "text": "Using SpeedDate from a julia script or session\n\n\nYou can execute the SpeedDate program from within a julia console session or script.\n\n\nTo do this, create a dictionary of arguments and then give that to the \nSpeedDate.compute\n function.\n\n\nusing\n \nSpeedDate\n\n\n\noptions\n \n=\n \nDict\n(\nmodel\n \n=\n \njc69\n,\n\n               \nmutation_rate\n \n=\n \n10e-9\n,\n\n               \nmethod\n \n=\n \ndefault\n,\n\n               \nscan\n \n=\n \nfalse\n,\n\n               \nonlydist\n \n=\n \nfalse\n,\n\n               \nfile\n \n=\n \ncontig1_ac.fas\n,\n\n               \noutfile\n \n=\n \ntest\n)\n\n\n\nSpeedDate\n.\ncompute\n(\noptions\n)\n\n\n\n\n\n\nThe dictionary should have the following fields:\n\n\n\n\n\"model\": Either \"jc69\" or \"k80\".\n\n\n\"mutation_rate\": A number representing the mutation rate, e.g. 10e-9.\n\n\n\"file\": A string that is the filename e.g. \"~/Desktop/myseqs.fasta\".\n\n\n\"outfile\": A string that is the basename of all output files.\n\n\n\"method\": Either \"default\" or \"simple\", I recommend leaving as \"default\".\n\n\n\"onlydist\": Set to true of false depending on whether or not you only want the distances to be computed.\n\n\n\"scan\": false.\n\n\n\n\nIf you want to do the sliding window scan, the following should also be added to the dictionary:\n\n\n\n\n\"scan\": true\n\n\n\"size\": A number representing the sliding window size.\n\n\n\"step\": A number representing the sliding window step.\n\n\n\n\n\n\nPlotting SpeedDate results from a julia script or session\n\n\nYou can plot the results of the SpeedDate program from within a julia console session or script.\n\n\nTo do this, create a dictionary of arguments and then give that to the \nSpeedDate.visualize\n function.\n\n\nusing\n \nSpeedDate\n\n\n\noptions\n \n=\n \nDict\n(\nwidth\n \n=\n \n12.0\n,\n\n               \nheight\n \n=\n \n8.0\n,\n\n               \nunits\n \n=\n \ncm\n,\n\n               \nbackend\n \n=\n \nsvg\n,\n\n               \nreference\n \n=\n \ndefault\n,\n\n               \ntable\n \n=\n \nfalse\n,\n\n               \nsortsim\n \n=\n \nfalse\n,\n\n               \ninputfile\n \n=\n \nmyresults.csv\n,\n\n               \noutputfile\n \n=\n \nmyplot.svg\n)\n\n\n\nSpeedDate\n.\nvisualize\n(\noptions\n)\n\n\n\n\n\n\nThe arguments dictionary should have the following fields:\n\n\n\n\n\"width\": Width of the plot.\n\n\n\"height\": Height of the plot.\n\n\n\"units\": Units for width and height of the plot (\"cm\", \"mm\" or \"inch\").\n\n\n\"backend\": The backend used to produce the plot.\n\n\n\"reference\": The name of the DNA sequence to use as a reference when plotting a windowed analysis.\n\n\n\"table\": Set to true to write out the table that was generated for plotting - only really useful for debugging.\n\n\n\"sortsim\": Set to true to sort the rows of the output table by average sequence similarity if you are plotting a windowed analysis.\n\n\n\"inputfile\": The pathname of the SpeedDate results file you want to plot.\n\n\n\"outputfile\": A name for the output plot.", 
            "title": "From julia"
        }, 
        {
            "location": "/man/injulia/#using-speeddate-from-a-julia-script-or-session", 
            "text": "You can execute the SpeedDate program from within a julia console session or script.  To do this, create a dictionary of arguments and then give that to the  SpeedDate.compute  function.  using   SpeedDate  options   =   Dict ( model   =   jc69 , \n                mutation_rate   =   10e-9 , \n                method   =   default , \n                scan   =   false , \n                onlydist   =   false , \n                file   =   contig1_ac.fas , \n                outfile   =   test )  SpeedDate . compute ( options )   The dictionary should have the following fields:   \"model\": Either \"jc69\" or \"k80\".  \"mutation_rate\": A number representing the mutation rate, e.g. 10e-9.  \"file\": A string that is the filename e.g. \"~/Desktop/myseqs.fasta\".  \"outfile\": A string that is the basename of all output files.  \"method\": Either \"default\" or \"simple\", I recommend leaving as \"default\".  \"onlydist\": Set to true of false depending on whether or not you only want the distances to be computed.  \"scan\": false.   If you want to do the sliding window scan, the following should also be added to the dictionary:   \"scan\": true  \"size\": A number representing the sliding window size.  \"step\": A number representing the sliding window step.", 
            "title": "Using SpeedDate from a julia script or session"
        }, 
        {
            "location": "/man/injulia/#plotting-speeddate-results-from-a-julia-script-or-session", 
            "text": "You can plot the results of the SpeedDate program from within a julia console session or script.  To do this, create a dictionary of arguments and then give that to the  SpeedDate.visualize  function.  using   SpeedDate  options   =   Dict ( width   =   12.0 , \n                height   =   8.0 , \n                units   =   cm , \n                backend   =   svg , \n                reference   =   default , \n                table   =   false , \n                sortsim   =   false , \n                inputfile   =   myresults.csv , \n                outputfile   =   myplot.svg )  SpeedDate . visualize ( options )   The arguments dictionary should have the following fields:   \"width\": Width of the plot.  \"height\": Height of the plot.  \"units\": Units for width and height of the plot (\"cm\", \"mm\" or \"inch\").  \"backend\": The backend used to produce the plot.  \"reference\": The name of the DNA sequence to use as a reference when plotting a windowed analysis.  \"table\": Set to true to write out the table that was generated for plotting - only really useful for debugging.  \"sortsim\": Set to true to sort the rows of the output table by average sequence similarity if you are plotting a windowed analysis.  \"inputfile\": The pathname of the SpeedDate results file you want to plot.  \"outputfile\": A name for the output plot.", 
            "title": "Plotting SpeedDate results from a julia script or session"
        }
    ]
}